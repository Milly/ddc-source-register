*ddc-source-register.txt*				register source plugin

Author: Milly (https://github.com/Milly)
License: MIT license

CONTENTS					*ddc-source-register-contents*

Introduction		|ddc-source-register-introduction|
Install			|ddc-source-register-install|
Examples		|ddc-source-register-examples|
Params			|ddc-source-register-params|
Item Attributes		|ddc-source-register-item-attributes|


==============================================================================
INTRODUCTION				    *ddc-source-register-introduction*

This source collects |registers|.
Excludes those used for |recording|.

Note that if 0x80 byte is contains, it will be determined that the register
was used for recording.


==============================================================================
INSTALL						 *ddc-source-register-install*

Please install both "denops.vim" and "ddc.vim".

https://github.com/vim-denops/denops.vim
https://github.com/Shougo/ddc.vim


==============================================================================
EXAMPLES					*ddc-source-register-examples*
>
	call ddc#custom#patch_global('sources', ['register'])

	" Optional: Set parameters, see `:help ddc-source-register-params`.
	call ddc#custom#patch_global('sourceParms', #{
	      \ register: #{
	      \   registers: '0123456789"+*#:',
	      \   maxAbbrWidth: 100,
	      \   ctrlCharHlGroup: 'Comment'
	      \ }})

	" Optional: Set `ddc-source-option-mark` to indicate the source name.
	" Optional: Set `ddc-source-option-maxKeywordLength` to exclude too long text.
	call ddc#custom#patch_global('sourceOptions', #{
	      \ register: #{
	      \   mark: 'Reg',
	      \   maxKeywordLength: 100,
	      \ }})
<

==============================================================================
PARAMS						  *ddc-source-register-params*

					 *ddc-source-register-param-registers*
registers	(string)
		Register names to collect.
		Specify the name of the register to collect, such as "012ab#".
		If empty, all |registers| are collected.

		Default: ""

				      *ddc-source-register-param-maxAbbrWidth*
maxAbbrWidth	(number)
		Max width of the abbreviates column.
		Items that exceed this width will be truncated.
		If 0 is specified, be unlimited.

		Default: 0

				   *ddc-source-register-param-ctrlCharHlGroup*
ctrlCharHlGroup	(string)
		Highlight group name for unprintable chars.
		If empty, highlight is disabled.

		Default: "SpecialKey"


==============================================================================
ITEM ATTRIBUTES				 *ddc-source-register-item-attributes*

				     *ddc-source-register-item-attribute-abbr*
abbr		(string)
		Register value.
		Control code is replaced with "^X" and highlighted with
		|ddc-source-register-param-ctrlCharHlGroup|.
		It is truncated by |ddc-source-register-param-maxAbbrWidth|.

				     *ddc-source-register-item-attribute-info*
info		(string)
		Register value.
		Control codes is contains as is.

				     *ddc-source-register-item-attribute-kind*
kind		(string)
		Register type like |:registers|.
		Type can be one of:
		"c"	for |characterwise| text
		"l"	for |linewise| text
		"b"	for |blockwise-visual| text

				     *ddc-source-register-item-attribute-menu*
menu		(string)
		Register name.

				     *ddc-source-register-item-attribute-word*
word		(string)
		Register value.
		Control code is replaced with "?".


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
